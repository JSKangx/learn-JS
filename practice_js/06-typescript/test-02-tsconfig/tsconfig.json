{
  "compilerOptions": {
    // 컴파일 시킨 산출물(js 파일)을 만들 디렉토리 경로 설정
    "outDir": "./build/",
    // compile 대상에 ts 뿐만 아니라 js까지 포함시킬지 설정.
    // true : (개발자가 작성한 js 파일이 ES6인 경우) 브라우저중에서 아직 ES6를 지원하지 못하는 브라우저가 있을 수 있고, 그 브라우저에서도 정상적으로 동작하게 하려면, ES6로 작성한 코드가 ES5 코드로 변형되어야 하는데, 그것을 가능하게 하는 옵션이다.
    "allowJs": true,
    /*
      자바스크립트 모듈화 방식에 대한 설정
      (1) ES6스타일의 모듈화 방식
      (2) commonJS 방식의 모듈화 방식
      둘의 호환성을 제공하는 방식이다.
    */
    "esModuleInterop": true,
    // json 파일을 마치 코드에서 객체로 바로 이용가능하게 함.
    "resolveJsonModule": true,
    // ts > js로 컴파일 시킬 때, js.map파일을 자동으로 만들어 달라는 것.
    // 개발자가 분석할 파일은 아니지만, 디버깅을 위해서 만들어주는 게 좋다.
    // 런타임시에는 js가 실행, 런타임 에러가 발생하면 js 라인수가 나온다.
    // 우리가 유지보수하는 파일은 js가 아니라 ts다.
    // 런타임 에러가 발생했을 때 에러 위치를 ts 코드 위치로 알려줘야 유지보수가 편하다.
    // 이 둘간의 관계를 유지하는 파일이 map이다.
    "sourceMap": true,
    // any 타입을 허용하지 않을 것인가의 설정. true : 허용하지 않겠다.
    // 타입을 지정하려고 ts를 쓰는건데, 굳이 any타입을 할 필요가 없다. 권장 X
    "noImplicitAny": true,
    // 컴파일된 js 코드를 어떤 스타일로 지정할 것인가?
    "target": "ES5",
    // jsx 구문을 어느 형태의 js로 변형시킬 것인가?
    "jsx": "react",
    // 모듈화 방식을 무엇으로 할 것인가?
    // 이것은 target 설정과 맞춰야 한다. ES5 - CommomJS / ES6 - ES6
    "module": "CommonJS"
  },
  // transplie 시킬 파일이 있는 경로
  "include": ["./src/**/*"], // src 서브 폴더 어디가 됐든(**), 그 하위에 있는 모든 것(*)
  // include 경로에 있는 파일 중 제외시킬 파일들의 목록.
  "exclude": ["node_modules", "**/*.spec.ts"]
}
